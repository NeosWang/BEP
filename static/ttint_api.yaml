---
swagger: "2.0"
info:
  title: "PostNL T&T International Client API"
  # summary:
  # description: 'This is a sample server Petstore server.  You can find out more about
  #   Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For
  #   this sample, you can use the api key `special-key` to test the authorization filters.'
  description: |
    # API description
    ## Introduction
      <span>The PostNL Track and Trace International client API allows users to retrieve and submit data from/to 
      PostNL. You can generate packet labels and assist label, close out and request the tracking status of 
      items. The web service is designed to be used for communication between applications and not 
      intended for manual human interaction. It is implemented using the REST principles and requires an 
      HTTPS connection.</span>

    ## Authentication
      <span>Access to the web service is limited to authorised clients only. PostNL will provide a acceptance and
      production API key for each customer. This private key needs to be included in the header of every
      request to identify itself and receive access to the restricted functions of the web service. An
      acceptance environment is available for integration purposes. Once the requests on the acceptance
      environment have been verified, an API key for the production environment can be obtained from your
      account manager. The JSON header should look similar to.</span>
      <pre class="code-in-text"><code>  {
        "api_key": "your-api_key-here",
        "Content-Type": "application/json"
      }</code></pre>


    ## Versioning
      <span>The version of the web service is part of the URL. Each new version of the web service, for example 
      when additional functions have been added, will use a different URL (but the same domain). 
      Therefore, previous versions will remain operational next to the latest version. It is possible that an 
      older version will eventually be switched off, any clients using this version will be notified early on and 
      given time to update their connected application.</span>

    ## Limitations
      <span>For security reasons the amount of requests that can be made to the web service is limited to 500 
      requests per minute. This is to prevent brute force attempts to get access to data as well as preventing 
      impact of a large amount of requests that could be caused by a bug in a client program accessing the 
      web service. Once a client program using the web services has been deployed and is functioning 
      correctly, the upper limit of allowed requests can be increased by PostNL upon request.</span>

    ## Label changes
      <span>The label design and the data it contains has been agreed upon with many different postal parties. It 
      is therefore not allowed to change the label provided by our API in any way. This means you may not 
      change the .pdf or .zpl file or make changes to the physical label after it has been printed. Using the 
      untampered label provided by our API will make sure your label complies with international 
      agreements and not cause delays or issues in processing your shipment. If you have suggestions or 
      wishes to change the label in any way please specify this request to your PostNL/Spring contact 
      person.</span>

    ## Integration guide
      <span>Below figure illustrates which API requests to integrate for each of the two types of integrations. If 
      your want to use parcel labels generated by our system follow the instructions for integration with
      parcel label generator. If your system is generating the labels follow the instructions for integration 
      without parcel label generator. The benefit of using our label generator is that you donâ€™t need to 
      create and maintain your own label templates. </span>
      <img src="static\img\integration_guide.png" />
  termsOfService: https://www.postnl.nl/en/
  contact:
    # name: PostNL
    # url: https://www.postnl.nl/en/
    email: xxx@postnl.nl
  # license:
  #   name: Apache 2.0
  #   url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: "ver 7.2"
  x-logo:
    url: 'static/img/logo.jpg'
    altText: Petstore logo

servers:
  - url: https://clients.postnl.post/v7/api
    description: Production environment

  - url: https://clients.postnl.a02.cldsvc.net/v7/api
    description: Acceptance environment

tags:
  - name: Label and closeout
  - name: Tracking
  - name: Special purpose
  # - name: pet
  #   description: Everything about your Pets
  #   externalDocs:
  #     description: Find out more
  #     url: http://swagger.io
  # - name: store
  #   description: Access to Petstore orders
  # - name: user
  #   description: Operations about user
  #   externalDocs:
  #     description: Find out more about our store
  #     url: http://swagger.io

paths:
  "/contentlabel/generate":
    post:
      tags:
        - Label and closeout
      summary: Generate packet labels
      description: ''
      operationId: generateContentLabel
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Shipment data of parcel
        required: true
        schema:
          "$ref": "#/definitions/ContentLabel"
      responses:
        '405':
          description: Invalid input
      security:
      - petstore_auth:
        - write:pets
        - read:pets




  # "/pet/{petId}/uploadImage":
  #   post:
  #     tags:
  #       - pet
  #     summary: uploads an image
  #     description: ""
  #     operationId: uploadFile
  #     consumes:
  #       - multipart/form-data
  #     produces:
  #       - application/json
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to update
  #         required: true
  #         type: integer
  #         format: int64
  #       - name: additionalMetadata
  #         in: formData
  #         description: Additional data to pass to server
  #         required: false
  #         type: string
  #       - name: file
  #         in: formData
  #         description: file to upload
  #         required: false
  #         type: file
  #     responses:
  #       "200":
  #         description: successful operation
  #         schema:
  #           "$ref": "#/definitions/ApiResponse"
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  # "/pet":
  #   $ref: "paths/pet.yaml"
  # "/pet/findByStatus":
  #   get:
  #     tags:
  #       - pet
  #     summary: Finds Pets by status
  #     description: Multiple status values can be provided with comma separated strings
  #     operationId: findPetsByStatus
  #     produces:
  #       - application/json
  #       - application/xml
  #     parameters:
  #       - name: status
  #         in: query
  #         description: Status values that need to be considered for filter
  #         required: true
  #         type: array
  #         items:
  #           type: string
  #           enum:
  #             - available
  #             - pending
  #             - sold
  #           default: available
  #         collectionFormat: multi
  #     responses:
  #       "200":
  #         description: successful operation
  #         schema:
  #           type: array
  #           items:
  #             "$ref": "#/definitions/Pet"
  #       "400":
  #         description: Invalid status value
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  # "/pet/findByTags":
  #   get:
  #     tags:
  #       - pet
  #     summary: Finds Pets by tags
  #     description:
  #       Multiple tags can be provided with comma separated strings. Use
  #       tag1, tag2, tag3 for testing.
  #     operationId: findPetsByTags
  #     produces:
  #       - application/json
  #       - application/xml
  #     parameters:
  #       - name: tags
  #         in: query
  #         description: Tags to filter by
  #         required: true
  #         type: array
  #         items:
  #           type: string
  #         collectionFormat: multi
  #     responses:
  #       "200":
  #         description: successful operation
  #         schema:
  #           type: array
  #           items:
  #             "$ref": "#/definitions/Pet"
  #       "400":
  #         description: Invalid tag value
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  #     deprecated: true
  # "/pet/{petId}":
  #   get:
  #     tags:
  #       - pet
  #     summary: Find pet by ID
  #     description: Returns a single pet
  #     operationId: getPetById
  #     produces:
  #       - application/json
  #       - application/xml
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet to return
  #         required: true
  #         type: integer
  #         format: int64
  #     responses:
  #       "200":
  #         description: successful operation
  #         schema:
  #           "$ref": "#/definitions/Pet"
  #       "400":
  #         description: Invalid ID supplied
  #       "404":
  #         description: Pet not found
  #     security:
  #       - api_key: []
  #   post:
  #     tags:
  #       - pet
  #     summary: Updates a pet in the store with form data
  #     description: ""
  #     operationId: updatePetWithForm
  #     consumes:
  #       - application/x-www-form-urlencoded
  #     produces:
  #       - application/json
  #       - application/xml
  #     parameters:
  #       - name: petId
  #         in: path
  #         description: ID of pet that needs to be updated
  #         required: true
  #         type: integer
  #         format: int64
  #       - name: name
  #         in: formData
  #         description: Updated name of the pet
  #         required: false
  #         type: string
  #       - name: status
  #         in: formData
  #         description: Updated status of the pet
  #         required: false
  #         type: string
  #     responses:
  #       "405":
  #         description: Invalid input
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  #   delete:
  #     tags:
  #       - pet
  #     summary: Deletes a pet
  #     description: ""
  #     operationId: deletePet
  #     produces:
  #       - application/json
  #       - application/xml
  #     parameters:
  #       - name: api_key
  #         in: header
  #         required: false
  #         type: string
  #       - name: petId
  #         in: path
  #         description: Pet id to delete
  #         required: true
  #         type: integer
  #         format: int64
  #     responses:
  #       "400":
  #         description: Invalid ID supplied
  #       "404":
  #         description: Pet not found
  #     security:
  #       - petstore_auth:
  #           - write:pets
  #           - read:pets
  # "/store/inventory":
  #   get:
  #     tags:
  #       - store
  #     summary: Returns pet inventories by status
  #     description: Returns a map of status codes to quantities
  #     operationId: getInventory
  #     produces:
  #       - application/json
  #     parameters: []
  #     responses:
  #       "200":
  #         description: successful operation
  #         schema:
  #           type: object
  #           additionalProperties:
  #             type: integer
  #             format: int32
  #     security:
  #       - api_key: []
  # "/store/order":
  #   post:
  #     tags:
  #       - store
  #     summary: Place an order for a pet
  #     description: ""
  #     operationId: placeOrder
  #     consumes:
  #       - application/json
  #     produces:
  #       - application/json
  #       - application/xml
  #     parameters:
  #       - in: body
  #         name: body
  #         description: order placed for purchasing the pet
  #         required: true
  #         schema:
  #           "$ref": "#/definitions/Order"
  #     responses:
  #       "200":
  #         description: successful operation
  #         schema:
  #           "$ref": "#/definitions/Order"
  #       "400":
  #         description: Invalid Order
  # "/store/order/{orderId}":
  #   get:
  #     tags:
  #       - store
  #     summary: Find purchase order by ID
  #     description:
  #       For valid response try integer IDs with value >= 1 and <= 10. Other
  #       values will generated exceptions
  #     operationId: getOrderById
  #     produces:
  #       - application/json
  #       - application/xml
  #     parameters:
  #       - name: orderId
  #         in: path
  #         description: ID of pet that needs to be fetched
  #         required: true
  #         type: integer
  #         maximum: 10
  #         minimum: 1
  #         format: int64
  #     responses:
  #       "200":
  #         description: successful operation
  #         schema:
  #           "$ref": "#/definitions/Order"
  #       "400":
  #         description: Invalid ID supplied
  #       "404":
  #         description: Order not found
  #   delete:
  #     tags:
  #       - store
  #     summary: Delete purchase order by ID
  #     description:
  #       For valid response try integer IDs with positive integer value.
  #       Negative or non-integer values will generate API errors
  #     operationId: deleteOrder
  #     produces:
  #       - application/json
  #       - application/xml
  #     parameters:
  #       - name: orderId
  #         in: path
  #         description: ID of the order that needs to be deleted
  #         required: true
  #         type: integer
  #         minimum: 1
  #         format: int64
  #     responses:
  #       "400":
  #         description: Invalid ID supplied
  #       "404":
  #         description: Order not found
  # "/user/createWithList":
  #   post:
  #     tags:
  #       - user
  #     summary: Creates list of users with given input array
  #     description: ""
  #     operationId: createUsersWithListInput
  #     consumes:
  #       - application/json
  #     produces:
  #       - application/json
  #       - application/xml
  #     parameters:
  #       - in: body
  #         name: body
  #         description: List of user object
  #         required: true
  #         schema:
  #           type: array
  #           items:
  #             "$ref": "#/definitions/User"
  #     responses:
  #       default:
  #         description: successful operation
  # "/user/{username}":
  #   get:
  #     tags:
  #       - user
  #     summary: Get user by user name
  #     description: ""
  #     operationId: getUserByName
  #     produces:
  #       - application/json
  #       - application/xml
  #     parameters:
  #       - name: username
  #         in: path
  #         description: "The name that needs to be fetched. Use user1 for testing. "
  #         required: true
  #         type: string
  #     responses:
  #       "200":
  #         description: successful operation
  #         schema:
  #           "$ref": "#/definitions/User"
  #       "400":
  #         description: Invalid username supplied
  #       "404":
  #         description: User not found
  #   put:
  #     tags:
  #       - user
  #     summary: Updated user
  #     description: This can only be done by the logged in user.
  #     operationId: updateUser
  #     consumes:
  #       - application/json
  #     produces:
  #       - application/json
  #       - application/xml
  #     parameters:
  #       - name: username
  #         in: path
  #         description: name that need to be updated
  #         required: true
  #         type: string
  #       - in: body
  #         name: body
  #         description: Updated user object
  #         required: true
  #         schema:
  #           "$ref": "#/definitions/User"
  #     responses:
  #       "400":
  #         description: Invalid user supplied
  #       "404":
  #         description: User not found
  #   delete:
  #     tags:
  #       - user
  #     summary: Delete user
  #     description: This can only be done by the logged in user.
  #     operationId: deleteUser
  #     produces:
  #       - application/json
  #       - application/xml
  #     parameters:
  #       - name: username
  #         in: path
  #         description: The name that needs to be deleted
  #         required: true
  #         type: string
  #     responses:
  #       "400":
  #         description: Invalid username supplied
  #       "404":
  #         description: User not found
  # "/user/login":
  #   get:
  #     tags:
  #       - user
  #     summary: Logs user into the system
  #     description: ""
  #     operationId: loginUser
  #     produces:
  #       - application/json
  #       - application/xml
  #     parameters:
  #       - name: username
  #         in: query
  #         description: The user name for login
  #         required: true
  #         type: string
  #       - name: password
  #         in: query
  #         description: The password for login in clear text
  #         required: true
  #         type: string
  #     responses:
  #       "200":
  #         description: successful operation
  #         headers:
  #           X-Expires-After:
  #             type: string
  #             format: date-time
  #             description: date in UTC when token expires
  #           X-Rate-Limit:
  #             type: integer
  #             format: int32
  #             description: calls per hour allowed by the user
  #         schema:
  #           type: string
  #       "400":
  #         description: Invalid username/password supplied
  # "/user/logout":
  #   get:
  #     tags:
  #       - user
  #     summary: Logs out current logged in user session
  #     description: ""
  #     operationId: logoutUser
  #     produces:
  #       - application/json
  #       - application/xml
  #     parameters: []
  #     responses:
  #       default:
  #         description: successful operation
  # "/user/createWithArray":
  #   post:
  #     tags:
  #       - user
  #     summary: Creates list of users with given input array
  #     description: ""
  #     operationId: createUsersWithArrayInput
  #     consumes:
  #       - application/json
  #     produces:
  #       - application/json
  #       - application/xml
  #     parameters:
  #       - in: body
  #         name: body
  #         description: List of user object
  #         required: true
  #         schema:
  #           type: array
  #           items:
  #             "$ref": "#/definitions/User"
  #     responses:
  #       default:
  #         description: successful operation
  # "/user":
  #   post:
  #     tags:
  #       - user
  #     summary: Create user
  #     description: This can only be done by the logged in user.
  #     operationId: createUser
  #     consumes:
  #       - application/json
  #     produces:
  #       - application/json
  #       - application/xml
  #     parameters:
  #       - in: body
  #         name: body
  #         description: Created user object
  #         required: true
  #         schema:
  #           "$ref": "#/definitions/User"
  #     responses:
  #       default:
  #         description: successful operation




# securityDefinitions:
#   api_key:
#     type: apiKey
#     name: api_key
#     in: header
#   petstore_auth:
#     type: oauth2
#     authorizationUrl: https://petstore.swagger.io/oauth/authorize
#     flow: implicit
#     scopes:
#       read:pets: read your pets
#       write:pets: modify pets in your account
definitions:
  ContentLabel:
    type: object
    required:
      - product_code
      - label_type
      - sender_details
    properties:
      product_code:
        type: string
        format: '3'
        example: 'TRD'
      label_type:
        "$ref": "#/definitions/LabelType"
      sender_details:
        "$ref": "#/definitions/SenderDetails"
      
  LabelType: 
    type: string
    format: '3'
    description: format of label
    enum:
      - ZPL
      - PDF
      
        

  SenderDetails:
    type: object
    description: Seller (sender) information
    required:
      - name
      - company
      - address
      - city
      - country
      - country_code
    properties:
      name:
        type: string
        format: '250'
        description: Seller contact person
        example: 'Hedley Parrish'
      company:
        type: string
        format: '100'
        description: Seller company
        example: "Webshop ABC"
      address:
        type: string
        format: '250'
        example: "Via Manzoni 19"
      postal_code:
        type: string
        format: '20'
        example: '22070'
      city:
        type: string
        format: '150'
        example: 'Montano Lucino'
      state:
        type: string
        format: '150'
        example: ''
      country:
        type: string
        format: '100'
        example: 'Italy'
      country_code:
        type: string
        format: '2'
        example: 'IT'
      email:
        type: string
        format: '150'
        example: 'johndoe@example.com'
      phone:
        type: string
        format: '20'
        example: ''
      id_ref:
        type: string
        format: '100'
        example: ''






  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      type:
        type: string
      message:
        type: string
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Category
  Pet:
    type: object
    required:
      - name
      - photoUrls
    properties:
      id:
        type: integer
        format: int64
      category:
        "$ref": "#/definitions/Category"
      name:
        type: string
        example: doggie
      photoUrls:
        type: array
        xml:
          wrapped: true
        items:
          type: string
          xml:
            name: photoUrl
      tags:
        type: array
        xml:
          wrapped: true
        items:
          xml:
            name: tag
          "$ref": "#/definitions/Tag"
      status:
        type: string
        description: pet status in the store
        enum:
          - available
          - pending
          - sold
    xml:
      name: Pet
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
    xml:
      name: Tag
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      petId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        type: string
        description: Order Status
        enum:
          - placed
          - approved
          - delivered
      complete:
        type: boolean
    xml:
      name: Order
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
externalDocs:
  description: Find out more about portal
  url: https://tracktraceportal-postnl.a02.cldsvc.net/
